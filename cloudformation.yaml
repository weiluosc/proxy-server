AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DockerImage:
    Type: String
    Default: 938136620574.dkr.ecr.us-west-1.amazonaws.com/snap-pixel-gateway
Resources:
  EC2VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  EC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties: 
      GroupDescription: 'VPC Security Group Allow 8080'
      SecurityGroupEgress: 
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: -1
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: ::/0
      VpcId: !Ref EC2VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EC2VPC
  EC2PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref EC2VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
  EC2PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref EC2VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref EC2VPC
  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EC2PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EC2PublicSubnet2
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - LogConfiguration:
            Options:
              awslogs-create-group: 'true'
              awslogs-group: /ecs/pixel-gateway
              awslogs-region: us-west-1
              awslogs-stream-prefix: ecs
            LogDriver: awslogs
          Name: cf-gateway
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Essential: true
          Cpu: 256
          Memory: 512
      NetworkMode: awsvpc
      TaskRoleArn: 'arn:aws:iam::938136620574:role/ecsTaskExecutionRole'
      ExecutionRoleArn: 'arn:aws:iam::938136620574:role/ecsTaskExecutionRole'
      RequiresCompatibilities:
        - FARGATE
      Cpu: .25 vCPU
      Memory: .5 GB
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      CapacityProviders:
        - FARGATE
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups: 
            - !Ref EC2SecurityGroup
          Subnets: 
            - !Ref EC2PublicSubnet1
            - !Ref EC2PublicSubnet2
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DeploymentController:
        Type: ECS
Outputs:
  ClusterName:
    Description: The created cluster.
    Value: !Ref ECSCluster
  ECSService:
    Description: The created service.
    Value: !Ref ECSService
